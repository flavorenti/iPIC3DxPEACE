/*******************************************************************************************
  Collisions.h -  Collisional processes for particles.
  -------------------
developers: Peter Stephenson
 ********************************************************************************************/
#ifndef _Collisions_
#define _Collisions_
#include "ipicfwd.h"

class Collisions {
  public:
      ~Collisions();
      Collisions(CollectiveIO * col, VirtualTopology3D *vct, Grid * grid);
      void Collide(int species, Particles3D *part, CollectiveIO * col);
      void CollideElectron(int species, Particles3D *part, int pidx, double vMag, CollectiveIO * col);
      double ProbColl(double vMag, double vScale);
      double velMagnitude(int species, Particles3D *part, int pidx);
      double neutralDensity(Particles3D part, int pidx);
      void ImpactIonization();
      void recordIonizedParticles(int species, Particles3D *part, int pidx, CollectiveIO * col);
      void createIonizedParticles(Particles3D *part);
      void resetIoniParticles();
      void secElecVelocity(double &u, double &v, double &w);
  private:
    Particles3D *eImpIoniPls; // Particles generated by e-impact ionization
    /*! Collision cross Section */
    double xSec;// Collision cross section in code units. 
    int nCollProcesses; // Number of collisional processes
    double *E_th_el; // Threshold energies for electron collisions.
    int nIoniColls; // No. of ionization collisions
    int collStepSkip;
    bool isIoni;
    /*! Threshold energy for each process*/
    double Eth;
    double Epl;
    double Epl_new;
    double nNeutral = 1e4;
    double qom_eReal = -1836; // Real charge per mass for electrons (if qom = 1 for protons)
    // Needs to be overuled by function (from photoionzation module)
    // double mPl = 2e4; 

    int ns;
    double dt;

    double upl;
    double vpl;
    double wpl;

    double xpl;
    double ypl;
    double zpl;

    // Species indexes for secondary ions and electrons
    int iSecElec;
    int iSecIon;

  protected:
    const Collective * col;   
    const VirtualTopology3D * vct;
    const Grid * grid;


    
};
#endif